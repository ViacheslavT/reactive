version: '3.7'
services:
  api:
    build:
      context: ../api
      dockerfile: ../api/Dockerfile
    command: java -Xmx512m -Xms512m -jar /app/app.jar
    ports:
      - '8080:8080'
    restart: always
    working_dir: /app/
    networks:
      - backend
  usual-api:
    build:
      context: ../usual-api
      dockerfile: ../usual-api/Dockerfile
      args:
        API_BASE_URL: http://api:8080/user
        DB_URL: jdbc:mysql://db:3306/test_db
        DB_USER: test
        DB_PASSWORD: test
    command: java -Xmx512m -Xms512m -jar /app/app.jar
    ports:
      - '8082:8082'
    restart: always
    depends_on:
      - db
      - api
    working_dir: /app/
    networks:
      - backend
  webflux-api:
    build:
      context: ../webflux-api
      dockerfile: ../webflux-api/Dockerfile
      args:
        API_BASE_URL: http://api:8080
        DB_URL: r2dbc:mysql://db:3306/test_db
        DB_USER: test
        DB_PASSWORD: test
    command: java -Xmx512m -Xms512m -jar /app/app.jar
    ports:
      - '8083:8083'
    restart: always
    depends_on:
      - db
      - api
    working_dir: /app/
    networks:
      - backend
  db:
    # same if using docker
    # docker run --name=mysqldb -d -p 3306:3306 -e MYSQL_ROOT_HOST=% -e MYSQL_ROOT_PASSWORD=root -e MYSQL_USER=test -e MYSQL_PASSWORD=test -e MYSQL_DATABASE=test_db mysql/mysql-server:5.7.24
    container_name: mysql
    image: mysql:8.0
    ports:
      - '3306:3306'
    restart: always
    environment:
      MYSQL_DATABASE: 'test_db'
      MYSQL_USER: 'test'
      MYSQL_PASSWORD: 'test'
      MYSQL_ROOT_PASSWORD: 'root'
    volumes:
      - 'db-data:/var/lib/mysql'
      - './scripts/schema.sql:/docker-entrypoint-initdb.d/1.sql'
    networks:
      - backend

# Volumes
volumes:
  db-data:

# Networks to be created to facilitate communication between containers
networks:
  backend: